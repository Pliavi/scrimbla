@import 'colors.less';

.hl-outline() {
	content: " ";
	position: absolute;
	top: 2px;
	left: 0px;
	right: 0px;
	bottom: 1px;
	margin: -2px -5px;
	border-radius: 12px;
	border: 1px solid @hl-border;
	box-shadow: 0px 0px 12px 4px @hl-shadow;
}

.imba-syntax(){
	q,s,b,i,u {
		text-decoration: none;
		font-weight: inherit;
		font-style: normal;
		text-decoration: none;
	}

	b { font-weight: inherit; }
	i { font-style: inherit; }

	-moz-tab-size: 4;
	-o-tab-size:   4;
	tab-size:      4;
	white-space: pre;
	code { white-space: pre; font-family: inherit; }
	font-family: @monofont;
}

.base-syntax() {
	._imopen,._imclose {
		color: inherit;
	}
	b { font-weight: inherit; }

	code {
		white-space: pre;
		font-family: inherit;
		color: @color;
	}

	q,.comment,._imcomment {
		color: @comment;
		font-style: normal;
		s { opacity: 1; font-weight: inherit; font-style: inherit; }
		a { color: @comment-link; }
		em { font-weight: bold; font-style: inherit; }
	}

	.keyword {
		color: @keyword;
		&.var { color: @var; }
		&.self { color: @self; }
	}
	.new { color: @keyword; }
	// .rb { color: @brackets; }
	.op,.operator { color: @op; }
	.regex { color: @regex; }
	.sel,.selector,._imtagid { color: @selector; }
	.number { color: @number; }
	.neostring,.string,._imistring { color: @string; }

	.bool,.false,.true,.null,.undefined,.literal { color: @bool; }

	.identifier { color: @identifier; }
	.key { color: @obj-key; }
	.key + .colon { color: @obj-key; }
	.const { color: @const; }
	.access{ color: @identifier; }
	.symbol{ color: @symbol; }
	// .function { color: @decl; }

	.ivar { color: @ivar; }
	.lvar { color: @lvar; }
	.methref{ color: @methref; }
	.const.lvar { color: @const; }

	.hl[eref] {
		@color: fade(@lvar-hl-shadow,50%);
		// text-shadow: 0px 1px 0px fade(@lvar,30%); // rgba(255, 244, 209, 0.45)
		text-shadow: 2px 0px 1px @color, -2px 0px 1px @color, 0px 2px 1px @color, 0px -2px 1px @color;

		// font-weight: 600;
		font-weight: 500;
		color: @lvar-hl !important;
		border-bottom: 1px solid fade(@lvar-hl,50%);
		border-radius: 2px;

		&:before {
			position: absolute;
		}
	}

	// Nesting tag
	._imtagnode {
		// color: @tag;
		& > :not(.value) { color: @tag; }

		& > ._imopen, & > ._imclose { color: @tag-brackets; }

		.tag_attr { color: @tag-attr-key; }
		& > .tag_type { color: @tag-name; }
		& > ._imopen:first-child + .identifier { color: @tag-name; }
		
		& > .dot + .identifier { color: @tag-class; }
		// & > .eq + .identifier { color: @identifier; }
		// & > .eq + .lvar { color: @lvar; }
		// & > .dot { color: inherit; }
		& > .hash { color: @tag; }
		// & > .hash + .identifier { color: inherit; }

		& > .self {color: @tag-self; }
		& > .ivar { color: @tag-ref; }
		// & > .paren > .rb:not(.call) { color: inherit; }
		& > .string {
			s { color: @tag-string-quotes; }
		}
	}

	._imwhitespace { color: @invisibles; }
	._imtab { color: @invisibles; }
	._imsemicolon { color: inherit; }

	.curly {
		& > .identifier:not(.lvar) {
			color: @obj-key;
		}
	}

	.identifier.idref { color: @selector; }

	// Method-name
	.def + .identifier { color: @decl; }
	.prop + .identifier { color: @decl; }
	.attr + .identifier { color: @decl; }
	.class + .const { color: @decl; }

	.def + ._imspace + .identifier { color: @decl; }
	.prop + ._imspace + .identifier { color: @decl; }
	.attr + ._imspace + .identifier { color: @decl; }
	.class + ._imspace + .const { color: @decl; }

	.keyword.tag + .tag_id { color: @decl; }
	.keyword.tag + .identifier { color: @decl; }
	.keyword.tag + .identifier + .op + .identifier { color: @decl; }
	.keyword.tag + .tag_id + .op + .identifier { color: @decl; }

	.keyword.tag + ._imspace + .tag_id { color: @decl; }
	.keyword.tag + ._imspace + .identifier { color: @decl; }
	.keyword.tag + ._imspace + .identifier + ._imspace + .op + ._imspace + .identifier { color: @decl; }
	.keyword.tag + ._imspace + .tag_id + ._imspace + .op + ._imspace + .identifier { color: @decl; }

	.keyword.for + ._imspace + .identifier { color: @lvar; }
	.keyword.for + ._imspace + .identifier + .comma + .identifier { color: @lvar; }
	.keyword.for + ._imspace + .identifier + .comma + ._imspace + .identifier { color: @lvar; }

	.keyword.own + ._imspace + .identifier { color: @lvar; }
	.keyword.own + ._imspace + .identifier + .comma + .identifier { color: @lvar; }
	.keyword.own + ._imspace + .identifier + .comma + ._imspace + .identifier { color: @lvar; }

	// ._imopen,._imclose {color: @brackets; }
	// .call > ._imopen,.call > ._imclose {color: inherit; }
	._imblockparams > ._imopen,._imblockparams > ._imclose {color: @blockparam-brackets; }

	.identifier + ._imparens {
		color: @call-brackets;
	}

	._imiexpr {
		& > ._imopen,
		& > ._imclose {
			color: @istr-brackets;
		}
	}

	._imistring > ._imopen, ._imistring > ._imclose { color: inherit; }
	._imsel > ._imopen, ._imsel > ._imclose { color: inherit; }

	._imcaret {
		.caret { background-color: @caret; }
		.start,.mid,.end { background-color: @selbg; }
	}

	.tag_type { color: @decl; }
	.var + .identifier { color: @lvar; }
	.var + ._imspace + .identifier { color: @lvar; }
	.let + .identifier { color: @lvar; }
	.let + ._imspace + .identifier { color: @lvar; }

	.string.focus_ {
		background: fade(@string,8%);
		border-radius: 2px;
	}

	.comma { color: inherit; }
	.dot + .identifier { color: @accessor; }
	.cdot + .identifier { color: @accessor; }

	b.err[error],b[hint-type='error'] {
		color: @err;
		background: fade(@err,20%);
	}

	.show-tabs ._imtab {
		position: relative;
		&:before {
			content: "-";
			color: transparent;
			position: absolute;
			top: 50%;
			left: 2px;
			right: 2px;
			border-top: 1px solid fade(white,5%);
		}
	}

	.caret {
		.part {
			background-color: @selbg;
		}
		.loc {
			.mark {
				@size: 3px;
				width: (@size * 2 + 1);
				height: 100%;
				border: @size solid transparent;
				border-top: @size solid @caret-color;
				background: transparent !important;
				box-sizing: border-box;
				margin-left: -(@size + 1);
				position: absolute;
			}

			.vbar {
				position: absolute;
				top: 5px;
				bottom: 1px;
				background: @caret-color;
				width: 1px;
				left: -1px;
			}
		}
	}
}

.dark-syntax () {
	.dark-colors;
	.base-syntax;

	._imtagnode:hover {
		& > ._imopen, & > ._imclose {
			color: @tag;
		}
	}

	.identifier + .op.colon { color: white; }
}

.light-syntax () {
	.light-colors;
	.base-syntax;
}